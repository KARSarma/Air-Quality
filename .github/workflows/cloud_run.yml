name: Deploy registry
 
on:
  push:
    branches:
      - main
  workflow_dispatch:
 
env:
  GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT }}
  IMAGE_NAME: cloud_run
  GCS_BUCKET: airquality-mlops-rg
  REGISTRY: gcr.io/${{ secrets.GCP_PROJECT }}
  IMAGE_TAG: ${{ github.sha }}
 
jobs:
  deploy-pipeline:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
 
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
 
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ secrets.GCP_PROJECT }}
 
      - name: Authenticate with Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
 
      - name: Configure Docker Authentication
        run: gcloud auth configure-docker
 
      # Create a temporary credentials file
      - name: Create credentials file
        run: |
          echo '${{ secrets.GCP_SA_KEY }}' > /tmp/gcp-key.json
          chmod 600 /tmp/gcp-key.json
 
      - name: Build Docker Image
        run: |
          docker build \
            --build-arg GCP_PROJECT=${{ secrets.GCP_PROJECT }} \
            -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }} \
            -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest \
            -f ./cloud_run/Dockerfile ./cloud_run
 
      - name: Run Model Training
        run: |
          docker run --rm \
            -v /tmp/gcp-key.json:/tmp/gcp-key.json:ro \
            -e GOOGLE_APPLICATION_CREDENTIALS=/tmp/gcp-key.json \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
 
      - name: Push Docker Images
        run: |
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
 
      # Always clean up credentials
      - name: Clean up credentials
        if: always()
        run: |
          rm -f /tmp/gcp-key.json